@using BlazorComplator.Factory
@using BlazorComplator.Factory.Interfice

<MudAppBar Style="@($"background-color:{Colors.BlueGrey.Default}")" Elevation="1">
	<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
	<MudText Typo="Typo.h5" Class="ml-3"> Managment Studio  </MudText>
	<MudSpacer/>
	<MudIconButton Icon="@Icons.Material.Filled.Login" Href="/" Color="Color.Inherit" Edge="Edge.End"/>
</MudAppBar>

<MudDrawer @bind-Open="_drawerOpen" Style="@($"background-color:{Colors.BlueGrey.Lighten3}")" ClipMode="DrawerClipMode.Always" Elevation="2">
    <MudDrawerHeader>
	<MudText Typo="Typo.h5" Class="mt-1">DB List</MudText>
</MudDrawerHeader>
@if (connector.GetDatabases() == null)
{
	<MudProgressCircular Color="Color.Info" Indeterminate="true" />
}
else
{

	@foreach (var dbName in connector.GetDatabases())
	{
		<MudTreeView T="string">
			<MudTreeViewItem Value="dbName">
				@foreach(var table in connector.GetTables(dbName))
				{
					<MudTreeViewItem Icon="@Icons.Filled.TableChart" Value="table" />
				}
			</MudTreeViewItem>
		</MudTreeView>
	}
}

</MudDrawer>





@code {
	[Parameter]
	public string? ConString { get; set; }

	[Parameter]
	public string? ConnectorType { get; set; }

	private IConnector connector { get; set; }

	bool _drawerOpen = true;

	protected override async Task OnInitializedAsync()
	{
		connector = ConnectorFactory.GetConnector(ConnectorType, ConString);

	}
	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

}

