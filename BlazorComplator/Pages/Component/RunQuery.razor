@using System.Data
@using BlazorComplator.AppDbContext
@using BlazorComplator.Factory
@using BlazorComplator.Factory.Interfice
@using BlazorComplator.Factory.Resault
@using BlazorComplator.Models
@inject BlazorComplator.Services.IQueryService QueryService
@inject IDialogService DialogService
@inject NavigationManager navManager
@inject MudBlazor.ISnackbar snackBar


<MudPaper Class="d-flex justify-start flex-grow-1 gap-4" Style="width:30%;" Elevation="0">
    <MudSelect T="string" @bind-Value="getDb" Margin="Margin.Dense" Label="Db List" Variant="Variant.Outlined">
        @foreach (var item in connector.GetDatabases())
        {
            <MudSelectItem T="string" Value="@item" />
        }

    </MudSelect>


    <MudButton OnClick="QueryRun" Variant="Variant.Outlined" Color="Color.Success">Execute</MudButton>

    <MudButton OnClick="SaveQuery" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info"  Size="Size.Small">Save Query</MudButton>
</MudPaper>


<MudTextField Label="Query" @bind-Value="@QueryResult" Variant="Variant.Filled" Lines="22" Style="@($"background-color:{Colors.Grey.Lighten5}")"></MudTextField>
<hr />

<MudSimpleTable Style="@($"overflow-x: auto; height:405px;background-color: {Colors.Grey.Lighten4};")">
    <thead>
        <tr>
            @foreach (var col in dataTable.Columns)
            {
                <th>@col</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in dataTable.Rows)
        {
            <tr>
                @foreach (var cell in row.Data)
                {
                    <td>@cell</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>





@code {


    [Parameter]
    public string? ConString { get; set; }

    [Parameter]
    public string ConnectorType { get; set; }

    [Parameter]
    public int QueryId { get; set; }

    private IConnector connector { get; set; }

    private ResaultSet dataTable = new ResaultSet();
    private string? QueryResult { get; set; } 
    private string? getDb { get; set; }

    private List<string> getDbList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        connector = ConnectorFactory.GetConnector(ConnectorType, ConString);

    }
    protected override async Task OnParametersSetAsync()
    {
        if (QueryId != 0)
        {
            QueryResult = QueryService.GetQuery(QueryId).QueryName;   
        }

    }

    private void QueryRun()
    {
        dataTable = connector.ExecuteQuery(getDb, QueryResult);
        StateHasChanged();
    }
    private async Task SaveQuery()
    {
        var parameters = new DialogParameters { ["conType"] = ConnectorType };
        var dialog = DialogService.Show<SaveQueryDialog>("Save Query", parameters);
        var resault = await dialog.Result;

        if (!resault.Cancelled && resault.Data != null)
        {
            string? name = resault.Data.ToString();
                Query query = new Query()
                {
                    QueryName = name,
                    QueryText = QueryResult,
                    ConnectorType = ConnectorType
                };
                QueryService.Create(query);
            
        }
        StateHasChanged();
    }




}
